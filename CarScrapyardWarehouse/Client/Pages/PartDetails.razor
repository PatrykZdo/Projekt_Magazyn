@page "/partdetails/{PartId}"

<PageTitle>Szczegóły części</PageTitle>

@implements IBrowserViewportObserver
@implements IAsyncDisposable
@using MudBlazor.Services
@using CarScrapyardWarehouse.Shared.Models
@using System.Net.Http.Json
@using System.Net.Http
@using Newtonsoft.Json
@using MudExtensions
@using Microsoft.AspNetCore.Http

@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager MyNavigationManager

<style>

    p {
        margin: 0;
        padding: 0;
    }

    .paper-title {
        text-align: center; 
    }

    .paper-container div {
        text-align: center;
        font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif 20px;
        font-size: 12px;
        
    }

    .qrcode-text {
        font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif 20px;
        font-weight: 700;
        font-size: 12px;
    }

    .sell-buttons {
        background-color:rgba(255,152,0,1);
        font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif 12px; 
        padding: 8px;
        border: 0.5px solid black;
    }

    .sell-buttons:hover {
        background-color: rgba(211,133,0,1);
    }

</style>


<MudContainer Class="mt-2" Fixed>
    <MudGrid Justify="Justify.Center" Style="align-items: center; margin-bottom: 15px">
        <MudItem Class="d-flex justify-content-between w-50">
            <MudTextField @bind-Value="@PartId" Label="Wprowadź ID części" Error="@(isError)" ErrorText="Nie ma części o podanym ID" @onkeypress="HandleKeyPress" />
            <MudButton Variant="Variant.Filled" Style="background-color: #43A047; color: white; height: 38px" Class="mt-4" @onclick="() => LoadPartData(PartId)" EndIcon="@Icons.Material.Filled.Send">@(_width > 950 ? "Pobierz dane części" : "")</MudButton>
        </MudItem>
    </MudGrid>

    @if (!IsLoading)
    {
        @if (PartData != null)
        {
            <MudStack Row="@(_width > 600 ? true : false)" Justify="Justify.Center">
                <MudStack Style="width: auto; height: 80%">
                    <MudPaper Elevation="3" Style="padding: 20px; margin-bottom: 10px;" Class="paper-container">
                        <MudText Typo="Typo.h5" Class="paper-title">Informacje o części</MudText>
                        <MudStack Style="flex-wrap: wrap;">
                            <MudStack Row="true" style="width: 100%;flex-wrap: wrap;">
                                <MudStack Style="width: 45%; align-items: center; padding: 12px;">
                                        <MudTooltip Text="Nazwa części" Placement="Placement.Left">
                                            <MudIcon Icon="@Icons.Material.Filled.Build" Size="Size.Large" Style="margin-bottom: 10px" />
                                        </MudTooltip>
                                    <MudText Class="fw-bold">@PartData.Part</MudText>
                                        <MudTooltip Text="Cena" Placement="Placement.Left">
                                            <MudIcon Icon="@Icons.Material.Filled.AttachMoney" Size="Size.Large" Style="margin-bottom: 10px" />
                                        </MudTooltip>
                                        <MudText>@(PartData.Price != null ? PartData.Price + " zł" : "brak ceny")</MudText>
                                    </MudStack>
                                    <MudStack Style="width: 45%; align-items: center; padding: 12px;">
                                        <MudTooltip Text="Opis części" Placement="Placement.Left">
                                            <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Large" Style="margin-bottom: 10px" />
                                        </MudTooltip>
                                        <MudText>
                                            @(PartData.Description != null ? PartData.Description : "brak opisu")
                                        </MudText>
                                    </MudStack>
                                </MudStack>
                                <MudStack Style="align-items: center; padding: 12px;">
                                    <MudTooltip Text="Szczegóły pojazdu" Placement="Placement.Left">
                                        <MudIcon Icon="@Icons.Material.Filled.DirectionsCar" Size="Size.Large" Style="margin-bottom: 10px" />
                                    </MudTooltip>
                                    <MudText>@(PartData.Brand != null ? $"{PartData.Brand}, {PartData.Model}, r. {PartData.Year}" : "wolna część")</MudText>
                                </MudStack>
                                <MudStack Style="align-items: center; padding: 12px;">
                                    <MudTooltip Text="Położenie (magazyn, regał, pozycja)" Placement="Placement.Left">
                                        <MudIcon Icon="@Icons.Material.Filled.Warehouse" Size="Size.Large" Style="margin-bottom: 10px" />
                                    </MudTooltip>
                                    <MudText>@PartData.Warehouse - @PartData.Area - @PartData.Position</MudText>
                                </MudStack>
                            </MudStack>
                    </MudPaper>
                </MudStack>

                <MudStack Style="width: auto; height: auto">
                    @if (_width > 600)
                    {
                        <MudPaper Elevation="3" Class="d-flex flex-column">
                            @if (part.PartImages.Count() == 0)
                            {
                                <div class="d-flex justify-content-center align-items-center" style="height: 250px;">
                                    <img src="images/noPhotos.png" alt="No Photos" style="width: 100%; height: 100%;" />
                                </div>
                            }
                            else
                            {
                                <MudCarousel Class="mud-width-full" Style="height:200px;" ShowArrows="true" ShowBullets="false" EnableSwipeGesture="true" AutoCycle="true" TData="object">
                                    @foreach (var partImage in part.PartImages)
                                    {
                                        <MudCarouselItem Transition="Transition.Fade" Color="@Color.Default">
                                            <div class="d-flex justify-content-center align-items-center" style="height:100%">
                                                <MudImage Src="@(string.Format($"data:image/png;base64,{Convert.ToBase64String(partImage.IdImageNavigation.Image1)}"))" Alt="Part's Photo" Elevation="25" Width="275" Height="200" Class="rounded-lg mx-3" />
                                            </div>
                                        </MudCarouselItem>
                                    }
                                </MudCarousel>
                            }
                        </MudPaper>

                    <MudPaper Elevation="3" Class="d-flex flex-column">
                        <MudExpansionPanels>
                            <MudExpansionPanel Text="Dodatkowe opcje" MaxHeight="1000">
                                <div style="display: flex; align-items: center; justify-content: space-around">
                                        <MudTooltip Text="Drukuj" Placement="Placement.Bottom">
                                            <MudButton Style="margin: 12px" Variant="Variant.Filled" Size="Size.Medium" OnClick="@(() => PrintQRCode("qrCode"))"><MudIcon Icon="@Icons.Material.Filled.Print" /> </MudButton>
                                        </MudTooltip>
                                        <MudTooltip Text="Edytuj" Placement="Placement.Bottom">
                                            <MudButton Style="margin: 12px" Variant="Variant.Filled" OnClick="@(() => HandleEditClick(PartData))" Color="Color.Info"><MudIcon Icon="@Icons.Material.Filled.Edit" /></MudButton>
                                        </MudTooltip>
                                        <MudTooltip Text="Usuń" Placement="Placement.Bottom">
                                            <MudButton Style="margin: 12px" Variant="Variant.Filled" OnClick="@(() => HandleDeleteClick(PartData.Id))" Color="Color.Error"><MudIcon Icon="@Icons.Material.Filled.Delete" /></MudButton>
                                        </MudTooltip>
                                    <div id="qrCode">
                                        <MudBarcode Value="@(ConvertToLink(PartData))" Width="130" Height="130" BarcodeFormat="ZXing.BarcodeFormat.QR_CODE" />
                                    </div>
                                </div>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudPaper>


                    }

                    <MudStack Row="true" Class="d-flex justify-content-between">
                        @if (!IsPartToLocalSale)
                        {
                            <MudButton Class="sell-buttons" OnClick="ToggleSell">Sprzedaj część</MudButton>
                            @if (!IsPartSaledToAllegro)
                            {
                                <MudButton OnClick=PostItemOnAllegro Class="sell-buttons">Wystaw na allegro</MudButton>
                            }
                            else
                            {
                                <MudText>Wystawione na Allegro</MudText>
                            }
                        }
                        else
                        {
                            <MudTextField @bind-Value="PriceToSell" Label="Podaj cenę sprzedaży" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentText="zł" />
                            <MudIconButton OnClick="ToggleSell" Icon="@Icons.Material.Filled.Close" Color="Color.Error" Size="Size.Medium"></MudIconButton>
                            <MudIconButton OnClick="SubmitLocalSale" Icon="@Icons.Material.Filled.Check" Color="Color.Primary" Size="Size.Medium"></MudIconButton>
                        }

                    </MudStack>

                </MudStack>
                

            </MudStack>
        }

    }
    else
            {
                <MudStack Justify="Justify.Center" AlignItems="AlignItems.Center">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                </MudStack>
            }
</MudContainer>

@code {
    [Parameter]
    public string PartId { get; set; }

    [Inject]
    private IBrowserViewportService BrowserViewportService { get; set; }

    private bool isError = false;
    private bool IsLoading { get; set; }
    private bool showText = false;
    private bool IsExpanded { get; set; } = false;
    private bool IsPartToLocalSale { get; set; } = false;
    private double? PriceToSell = 0;

    private List<PartImage> PartImages { get; set; } = new List<PartImage>();

    private PartsData PartData = null;
    private Part part { get; set; }
    private Vehicle vehicle { get; set; }
    private Warehouse warehouse { get; set; }
    private CarScrapyardWarehouse.Shared.Models.Position position { get; set; }
    private Area area { get; set; }
    private HttpContext httpContext = new DefaultHttpContext();
    bool IsLogged;
    string accessToken;

    private int _width = 0;
    private int _height = 0;
    private bool IsPartSaledToAllegro = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await BrowserViewportService.SubscribeAsync(this, fireImmediately: true);
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync() => await BrowserViewportService.UnsubscribeAsync(this);

    Guid IBrowserViewportObserver.Id { get; } = Guid.NewGuid();

    ResizeOptions IBrowserViewportObserver.ResizeOptions { get; } = new()
        {
            ReportRate = 50,
            NotifyOnBreakpointOnly = false
        };

    Task IBrowserViewportObserver.NotifyBrowserViewportChangeAsync(BrowserViewportEventArgs browserViewportEventArgs)
    {
        _width = browserViewportEventArgs.BrowserWindowSize.Width;
        _height = browserViewportEventArgs.BrowserWindowSize.Height;

        return InvokeAsync(StateHasChanged);
    }

    protected string ConvertToLink(PartsData item)
    {
        var a = $"{NavigationManager.BaseUri}partdetails/{item.Id}";
        return a;
    }

    protected void AddSnackbar(string message, Severity severity)
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        Snackbar.Add(message, severity);
    }

    private async Task PrintQRCode(string barcodeId)
    {
        showText = true;

        try
        {
            await JSRuntime.InvokeVoidAsync("PrintQRCode", barcodeId);
            showText = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Wystąpił błąd podczas drukowania: " + ex.Message);
            showText = false;
        }
    }

    public async Task LoadPartData(string partId)
    {
        PartData = null;
        isError = false;
        IsPartToLocalSale = false;
        try
        {
            int pId;
            try
            {
                if (!int.TryParse(partId, out pId))
                    pId = JsonConvert.DeserializeObject<PartsData>(partId).Id;
            }
            catch (Exception)
            {
                pId = 0;
            }

            IsLoading = true;

            part = await VehicleService.GetPartById(pId);
            vehicle = await VehicleService.GetVehicleById(part.IdVehicle ?? 0);
            position = await WarehouseService.GetPositionsById(part.IdPosition);
            area = await WarehouseService.GetAreaById(position.IdArea);
            warehouse = await WarehouseService.GetWarehouseById(area.IdWarehouse);

            if(part != null && part.Archived != true)
            {
                PartData = new PartsData();
                PartData.Id = part.Id;
                PartData.Part = part.Name;
                PartData.Description = part.Description;
                PartData.Brand = vehicle.Brand;
                PartData.Model = vehicle.Model;
                PartData.Year = vehicle.Year;
                PartData.Position = position.PositionName;
                PartData.Area = area.AreaName; 
                PartData.Warehouse = warehouse.WarehouseName;
                PartData.Price = part.Price;

                if(vehicle.Archived == true)
                {
                    PartData.Brand = null;

                }

            } else
            {
                isError = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            isError = true;
            //NavigationManager.NavigateTo("/");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async void HandleDeleteClick(int partId)
    {

        var parameters = new DialogParameters<DialogEditDelete>();
        parameters.Add(x => x.ContentText, "Czy na pewno chcesz usunąć tą część?");
        parameters.Add(x => x.ButtonText, "Usuń");
        parameters.Add(x => x.Color, Color.Error);
        parameters.Add(x => x.partId, partId);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium };

        var dialog = DialogService.Show<DialogEditDelete>("Usuwanie", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            AddSnackbar("Pomyślnie usunięto część", Severity.Success);
            await LoadPartData(partId.ToString());
            StateHasChanged();
        }
    }

    private async void HandleEditClick(PartsData item)
    {
        var parameters = new DialogParameters<DialogEditDelete>();
        parameters.Add(x => x.ContentText, "Edycja");
        parameters.Add(x => x.ButtonText, "Edytuj");
        parameters.Add(x => x.Color, Color.Primary);
        parameters.Add(x => x.toEdit, true);
        parameters.Add(x => x.partsData, item);
        parameters.Add(x => x.partName, item.Part);
        parameters.Add(x => x.partPrice, item.Price);
        parameters.Add(x => x.partDescription, item.Description);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium };

        var dialog = DialogService.Show<DialogEditDelete>("Edycja", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            AddSnackbar("Edycja nastąpiła pomyślnie", Severity.Info);
            await LoadPartData(item.Id.ToString());
            StateHasChanged();
        }
    }
    private async void PostItemOnAllegro()
    {

        var jsonData = new Data
            {
                productSet = new ProductSet[]
        {
        new ProductSet
        {
            product = new Product
            {
                id = "0158fe5d-f724-42dc-b08b-b4d3524f49a7",
                images = new List<string>
                    {
                        "https://image.made-in-china.com/202f0j00SjfGyWgcCtbe/Alternator-Clutch-Pulley-27415-0W042-Car-Accessories-for-Toyota.webp"
                    }
            }
        }
        },
                name = $"{part.Name}",
                sellingMode = new SellingMode
                {
                    price = new Price
                    {
                        amount = $"{part.Price}",
                        currency = "PLN"
                    }
                },
                stock = new Stock
                {
                    available = 1
                },
                description = new Description
                {
                    sections = new List<Section>
                {
                new Section
                {
                    items = new List<Item>
                    {
                        new Item
                        {
                            type = "TEXT",
                            content = $"<p>{part.Description}</p>"
                        }
                    }
                }
                }
                }
            };

        var wholeObject = new WholeObject
            {
                Code = accessToken,
                data = jsonData
            };


        var postItem = await HttpClient.PostAsJsonAsync($"https://massive-buffalo-happily.ngrok-free.app/api/Allegro/PostItem", wholeObject);
        IsPartSaledToAllegro = true;
        StateHasChanged();

    }
    private async void GetAuthToken()
    {
        var cookievalue = await HttpClient.GetStringAsync($"https://massive-buffalo-happily.ngrok-free.app/api/Allegro/PrevToken");
        if (cookievalue != null)
        {
            accessToken = cookievalue;
        }
        Console.WriteLine(cookievalue);
    }

    protected async override void OnInitialized()
    {
        GetAuthToken();
    }


    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await LoadPartData(PartId);
        }
    }

    private void ToggleSell()
    {
        IsPartToLocalSale = !IsPartToLocalSale;
        PriceToSell = PartData.Price;
    }

    private async Task SubmitLocalSale()
    {
        part.Price = PriceToSell;
        await VehicleService.UpdatePart(part);

        await VehicleService.DeletePart(part.Id);

        RefreshPage();
    }
    private async void GetProductsOfferts()
    {
        var products = await HttpClient.GetStringAsync($"https://massive-buffalo-happily.ngrok-free.app/api/Allegro/products?givencode={accessToken}");

        Console.WriteLine(products);
    }

    void RefreshPage() => NavigationManager.NavigateTo(NavigationManager.Uri, true);
}