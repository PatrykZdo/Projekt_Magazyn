@page "/carlist"
@using System.Net.Http.Json
@using CarScrapyardWarehouse.Client.Interfaces
@using CarScrapyardWarehouse.Client.Shared
@using CarScrapyardWarehouse.Shared.Models
@inject IDialogService DialogService
@inject HttpClient httpClient
@inject ISnackbar Snackbar

<PageTitle>Wyszukaj Auto</PageTitle>
@if (_Loaded) {
	<MudDataGrid Style="margin:15px"
	Items="@Cars"
	SortLabel="Sort By"
	Dense="@dense"
	Hover="@hover"
	Filterable="true"
	FilterMode="DataGridFilterMode.ColumnFilterRow"
	Bordered="@bordered"
	SortMode="SortMode.Single"
	QuickFilter="@_quickFilter">

		<ToolBarContent>
			<MudText Typo="Typo.h6">Lista wszystkich pojazdów</MudText>
			<MudSpacer />
			<MudTextField @bind-Value="searchString1"
			Placeholder="Szukaj"
			Adornment="Adornment.Start"
			AdornmentIcon="@Icons.Material.Filled.Search"
			IconSize="Size.Medium" Class="mt-0 mb-1"
			@oninput="HandleInput"
			Immediate="true">
			</MudTextField>
		</ToolBarContent>
		<Columns>
			<PropertyColumn Property="x => x.Model" Title="Model">
				<FilterTemplate>
					<MudIconButton OnClick="@OpenFilter_M" Icon="@M_icon" Size="@Size.Small" />
					<MudOverlay Visible="@M_filterOpen" OnClick="@(() =>M_filterOpen = false)" />
					<MudPopover Open="@M_filterOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
					Style="padding: 10px">
						<MudStack Spacing="0">
							<MudCheckBox T="bool" Label="Select All" Size="@Size.Small" Checked="@M_selectAll" CheckedChanged="@MSelectAll" />
							<MudStack Spacing="0" Style="overflow-y:auto;max-height:250px">
								@foreach (var item in context.Items.DistinctBy(x => x.Model).OrderBy(x => x.Model))
								{
									<MudCheckBox T="bool" Label="@($"{item.Model} ({context.Items.Where(x => x.Model.Equals(item.Model)).Count()})")" Size="@Size.Small" Checked="@(M_selectedItems.Contains(item))"
									CheckedChanged="@((value) => MSelectedChanged(value,Cars.Where(x => x.Model == item.Model).ToHashSet()))" />
								}
							</MudStack>
							<MudStack Row="true">
								<MudButton Color="Color.Error" OnClick="@(() => CloseFilter("Model"))">Zamknij</MudButton>
								<MudButton Color="@Color.Primary" OnClick="@(() => ApplyFilterAsync(context,"Model"))">Filter</MudButton>
							</MudStack>
						</MudStack>
					</MudPopover>
			</FilterTemplate>
		</PropertyColumn>
		<PropertyColumn Property="x => x.Brand" Title="Marka">
			<FilterTemplate>
				 <MudIconButton OnClick="@OpenFilter_B" Icon="@B_icon" Size="@Size.Small" />
                <MudOverlay Visible="@B_filterOpen" OnClick="@(() => B_filterOpen = false)" />
						<MudPopover Open="@B_filterOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
								Style="padding: 10px">
		           <MudStack Spacing="0">
                       <MudCheckBox T="bool" Label="Select All" Size="@Size.Small" Checked="@B_selectAll" CheckedChanged="@BSelectAll" />
					    <MudStack Spacing="0" Style="overflow-y:auto;max-height:250px">
									@foreach (var item in context.Items.DistinctBy(x => x.Brand).OrderBy(x => x.Brand))
									{
									<MudCheckBox T="bool" Label="@($"{item.Brand} ({context.Items.Where(x => x.Brand.Equals(item.Brand)).Count()})")" Size="@Size.Small" Checked="@(B_selectedItems.Contains(item))"
									CheckedChanged="@((value) => BSelectedChanged(value,Cars.Where(x => x.Brand == item.Brand).ToHashSet()))" />
								}
							</MudStack>
							<MudStack Row="true">
								<MudButton Color="Color.Error" OnClick="@(() => CloseFilter("Brand"))">Zamknij</MudButton>
								<MudButton Color="@Color.Primary" OnClick="@(() => ApplyFilterAsync(context,"Brand"))">Filter</MudButton>
							</MudStack>
						</MudStack>
					</MudPopover>
				</FilterTemplate>
			</PropertyColumn>
			<PropertyColumn Property="x => x.Year" Title="Rocznik">
				<FilterTemplate>
					<MudIconButton OnClick="@OpenFilter_Y" Icon="@Y_icon" Size="@Size.Small" />
					<MudOverlay Visible="@Y_filterOpen" OnClick="@(() => Y_filterOpen = false)" />
					<MudPopover Open="@Y_filterOpen" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter"
					Style="padding: 10px">
						<MudStack Spacing="0">
							<MudCheckBox T="bool" Label="Select All" Size="@Size.Small" Checked="@Y_selectAll" CheckedChanged="@YSelectAll" />
							<MudStack Spacing="0" Style="overflow-y:auto;max-height:250px">
								@foreach (var item in context.Items.DistinctBy(x => x.Year).OrderBy(x => x.Year))
								{
									<MudCheckBox T="bool" Label="@($"{item.Year} ({context.Items.Where(x => x.Year.Equals(item.Year)).Count()})")" Size="@Size.Small" Checked="@(Y_selectedItems.Contains(item))"
									CheckedChanged="@((value) => YSelectedChanged(value,Cars.Where(x => x.Year == item.Year).ToHashSet()))" />
								}
							</MudStack>
							<MudStack Row="true">
								<MudButton Color="Color.Error" OnClick="@(() => CloseFilter("Year"))">Zamknij</MudButton>
								<MudButton Color="@Color.Primary" OnClick="@(() => ApplyFilterAsync(context,"Year"))">Filter</MudButton>
							</MudStack>
						</MudStack>
					</MudPopover>
				</FilterTemplate>
			</PropertyColumn>
			<HierarchyColumn />
			<TemplateColumn CellClass="d-flex justify-end" Sortable="false" Style="max-width: 100px;">
				<FilterTemplate>
					@if (AnyFilterSelected())
					{
						<MudStack Row="true" Class="d-flex justify-end">
							<MudButton OnClick="@(() => ClearFilterAsync(context))">Czyść filtry</MudButton>
						</MudStack>
					}
				</FilterTemplate>
				<CellTemplate>
					<MudStack 
				Row
					>
						<MudButton OnClick="@(() => HandleDeleteClick(context.Item.Id))" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">Usuń</MudButton>
					</MudStack>
				</CellTemplate>
			</TemplateColumn>
		</Columns>
		<ChildRowContent >
			<MudCard>
				<MudCardHeader>
					<CardHeaderContent>
						<MudText Typo="Typo.h6">@context.Item.Brand @context.Item.Model</MudText>
					</CardHeaderContent>
				</MudCardHeader>
				<MudCardContent>

					<MudText Typo="Typo.body1">Vin: @context.Item.Vin</MudText>
					<MudSpacer />
					<MudText Typo="Typo.body1">Typ: @V_Types.Single(x => x.Id == @context.Item.IdType).Type </MudText>
					<MudDivider />
					<div style="align-content:center">
						<MudExpansionPanel Class="align-content-center fw-bold" Text="Szczegóły">
							<MudText Typo="Typo.body1">Zdjęcia</MudText>
							<MudItem Class="mt-3 mb-3 d-flex">
								@foreach (var image in context.Item.VehicleImages)
								{
									<MudImage Src="@(string.Format($"data:image/png;base64,{Convert.ToBase64String(image.IdImageNavigation.Image1)}"))" Alt="Vehicle's Photo'" Elevation="25" Width="200" Height="150" Class="rounded-lg" />
								}
							</MudItem>
							<MudText Typo="Typo.body1" Class="mt-5 ">Atrybuty</MudText>
							<MudGrid Justify="Justify.FlexStart" Spacing="1">
								<MudChipSet  Class="mt-2 d-flex">
									@foreach (var attribute in context.Item.VehicleAttributeValues)
									{
										<MudChip Variant="Variant.Text" Color="Color.Primary" Value="@(attribute.Value)">@(
									attribute.IdAttributeNavigation.AttriburteName
									): @(
											attribute.Value
											)</MudChip>
									}

								</MudChipSet>
							</MudGrid>
						</MudExpansionPanel>
					</div>
				</MudCardContent>
			</MudCard>
		</ChildRowContent>
		<PagerContent>
			<MudDataGridPager T="Vehicle" RowsPerPageString="Liczba wierszy" InfoFormat="@infoFormat" />
		</PagerContent>
	</MudDataGrid>
} else
{
	<MudStack Justify="Justify.Center" AlignItems="AlignItems.Center" Style="height:100vh; width:100%;">
		<MudProgressCircular Color="Color.Primary" Indeterminate="true" />
	</MudStack>
}
@code {
	private bool _Loaded = false;
	private int Load_Value;
	private bool open = false;
	private bool hover = false;
	private bool dense = false;
	private bool bordered = false;
	private string searchString1 = "";
	private string infoFormat = "{first_item}-{last_item} z {all_items}";
	private Vehicle selectedItem = null;
	private bool _sortNameByLength;
	private IEnumerable<Vehicle> Cars = new List<Vehicle>();
	private IEnumerable<Attribute> attributes = new List<Attribute>();
	private IEnumerable<VehicleAttributeValue> Vattr = new List<VehicleAttributeValue>();
	private IEnumerable<VehicleTypeAttribute> TyAttr = new List<VehicleTypeAttribute>();
	private IEnumerable<VehiclesType> V_Types = new List<VehiclesType>();


	bool M_filterOpen = false;
	bool B_filterOpen = false;
	bool Y_filterOpen = false;
	HashSet<Vehicle> M_selectedItems = new();
	HashSet<Vehicle> M_filterItems = new();
	HashSet<Vehicle> B_selectedItems = new();
	HashSet<Vehicle> B_filterItems = new();
	HashSet<Vehicle> Y_selectedItems = new();
	HashSet<Vehicle> Y_filterItems = new();
	FilterDefinition<Vehicle> _filterDefinition;
	bool M_selectAll = true;
	bool B_selectAll = true;
	bool Y_selectAll = true;
	string M_icon = Icons.Material.Outlined.FilterAlt;
	string B_icon = Icons.Material.Outlined.FilterAlt;
	string Y_icon = Icons.Material.Outlined.FilterAlt;

	protected override async Task OnInitializedAsync()
	{

		await base.OnInitializedAsync();
		Cars = await VehicleService.GetVehicles();
		attributes = await VehicleService.GetAttributes();
		Vattr = await VehicleService.GetVehicleAttributeValues();
		TyAttr = await VehicleService.GetVehicleTypeAttributes();
		V_Types = await VehicleService.GetVehiclesTypes();
		Cars = Cars.Where(x => x.Archived != true);
		M_selectedItems = Cars.ToHashSet();
		M_filterItems = Cars.ToHashSet();
		B_selectedItems = Cars.ToHashSet();
		B_filterItems = Cars.ToHashSet();
		Y_selectedItems = Cars.ToHashSet();
		Y_filterItems = Cars.ToHashSet();
		_filterDefinition = new FilterDefinition<Vehicle>
			{
				FilterFunction = x => M_filterItems.Contains(x) & B_filterItems.Contains(x) & Y_filterItems.Contains(x)
			};
		LLoaded();


	}


	private Func<Vehicle, object> _sortBy => x =>
	{
		if (_sortNameByLength)
			return x.Model.Length;
		else
			return x.Model;
	};
	private Func<Vehicle,bool> _quickFilter => x =>
	{
		if (string.IsNullOrWhiteSpace(searchString1))
			return true;
		if (x.Model.Contains(searchString1, StringComparison.OrdinalIgnoreCase))
			return true;
		if (x.Brand.Contains(searchString1, StringComparison.OrdinalIgnoreCase))
			return true;
		if (x.Vin.Contains(searchString1, StringComparison.OrdinalIgnoreCase))
			return true;
		return false;
	};
	private void HandleInput(ChangeEventArgs e)
	{

		searchString1 = e.Value.ToString();
	}

	private string Get_Attr_Of_Vehicle(Vehicle car,int Atr_id)
	{

		if(Vattr.SingleOrDefault(x => x.IdAttribute == Atr_id && x.IdVehicle == car.Id) != null)
		{
			return Vattr.SingleOrDefault(x => x.IdAttribute == Atr_id && x.IdVehicle == car.Id).Value;
		}
		else
		{
			return "brak";
		}
	}
	public void LLoaded() => _Loaded = true;


	/*private async Task ArchiveVehicle(int id){
	await VehicleService.DeleteVehicle(id);
	var Temp = await VehicleService.GetVehicles();
	Cars = Temp.Where(x => x.Archived != true);
	StateHasChanged();
	}*/

	protected void AddSnackbar(string message, Severity severity)
	{
		Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
		Snackbar.Add(message, severity);
	}

	private async void HandleDeleteClick(int partId)
	{

		var parameters = new DialogParameters<DialogEditDelete>();
		parameters.Add(x => x.ContentText, "Czy na pewno chcesz usunąć ten pojazd?");
		parameters.Add(x => x.ButtonText, "Usuń");
		parameters.Add(x => x.Color, Color.Error);
		parameters.Add(x => x.isCarToDelete, true);
		parameters.Add(x => x.partId, partId);

		var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.Medium };

		var dialog = DialogService.Show<DialogEditDelete>("Usuwanie", parameters, options);
		var result = await dialog.Result;

		if (!result.Canceled)
		{
			AddSnackbar("Pomyślnie usunięto pojazd", Severity.Success);
			var Temp = await VehicleService.GetVehicles();
			Cars = Temp.Where(x => x.Archived != true);
			StateHasChanged();
		}
	}


	//Filtry

	void OpenFilter_M()
	{
		M_filterOpen = true;
	}
	void OpenFilter_B()
	{
		B_filterOpen = true;
	}
	void OpenFilter_Y()
	{
		Y_filterOpen = true;
	}

	private void MSelectedChanged(bool value, HashSet<Vehicle> item)
	{
		if (value)
			M_selectedItems.UnionWith(item);
		else
			M_selectedItems = M_selectedItems.Except(item).ToHashSet();

		if (M_selectedItems.Count == Cars.Count())
			M_selectAll = true;
		else
			M_selectAll = false;
	}
	private void BSelectedChanged(bool value, HashSet<Vehicle> item)
	{
		if (value)
			B_selectedItems.UnionWith(item);
		else
			B_selectedItems = B_selectedItems.Except(item).ToHashSet();

		if (B_selectedItems.Count == Cars.Count())
			B_selectAll = true;
		else
			B_selectAll = false;
	}
	private void YSelectedChanged(bool value, HashSet<Vehicle> item)
	{
		if (value)
			Y_selectedItems.UnionWith(item);
		else
			Y_selectedItems = Y_selectedItems.Except(item).ToHashSet();

		if (Y_selectedItems.Count == Cars.Count())
			Y_selectAll = true;
		else
			Y_selectAll = false;
	}

	private async Task ClearFilterAsync(FilterContext<Vehicle> context)
	{
		M_filterOpen = false;
		M_selectedItems = Cars.ToHashSet();
		M_filterItems = Cars.ToHashSet();
		M_icon = Icons.Material.Outlined.FilterAlt;
		B_filterOpen = false;
		B_selectedItems = Cars.ToHashSet();
		B_filterItems = Cars.ToHashSet();
		B_icon = Icons.Material.Outlined.FilterAlt;
		Y_filterOpen = false;
		Y_selectedItems = Cars.ToHashSet();
		Y_filterItems = Cars.ToHashSet();
		Y_icon = Icons.Material.Outlined.FilterAlt;
		await context.Actions.ClearFilterAsync(_filterDefinition);

	}

	private async Task ApplyFilterAsync(FilterContext<Vehicle> context,string s)
	{
		switch(s)
		{
			case "Model":
				M_filterOpen = false;
				M_filterItems = M_selectedItems.ToHashSet();
				M_icon = M_filterItems.Count == Cars.Count() ? Icons.Material.Outlined.FilterAlt : Icons.Material.Filled.FilterAlt;
				await context.Actions.ApplyFilterAsync(_filterDefinition);
				break;
			case "Brand":
				B_filterOpen = false;
				B_filterItems = B_selectedItems.ToHashSet();
				B_icon = B_filterItems.Count == Cars.Count() ? Icons.Material.Outlined.FilterAlt : Icons.Material.Filled.FilterAlt;
				await context.Actions.ApplyFilterAsync(_filterDefinition);
				break;
			case "Year":
				Y_filterOpen = false;
				Y_filterItems = Y_selectedItems.ToHashSet();
				Y_icon = Y_filterItems.Count == Cars.Count() ? Icons.Material.Outlined.FilterAlt : Icons.Material.Filled.FilterAlt;
				await context.Actions.ApplyFilterAsync(_filterDefinition);
				break;
			default:
				break;
		}
	}
	private void MSelectAll(bool value)
	{
		M_selectAll = value;

		if (value)
		{
			M_selectedItems = Cars.ToHashSet();
		}
		else
		{
			M_selectedItems.Clear();
		}
	}
	private void BSelectAll(bool value)
	{
		B_selectAll = value;

		if (value)
		{
			B_selectedItems = Cars.ToHashSet();
		}
		else
		{
			B_selectedItems.Clear();
		}
	}
	private void YSelectAll(bool value)
	{
		Y_selectAll = value;

		if (value)
		{
			Y_selectedItems = Cars.ToHashSet();
		}
		else
		{
			Y_selectedItems.Clear();
		}
	}



	void CloseFilter(string s)
	{
		switch (s)
		{
			case "Brand":
				B_filterOpen = false;
				break;
			case "Model":
				M_filterOpen = false;
				break;
			case "Year":
				Y_filterOpen = false;
				break;
		}
	}

	public bool AnyFilterSelected()
	{
		return B_icon == Icons.Material.Filled.FilterAlt ||
		M_icon == Icons.Material.Filled.FilterAlt ||
		Y_icon == Icons.Material.Filled.FilterAlt;
	}
}
